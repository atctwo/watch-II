<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.18">
  <compounddef id="namespacewatch2" kind="namespace" language="C++">
    <compoundname>watch2</compoundname>
    <innerclass refid="structwatch2_1_1alarmData" prot="public">watch2::alarmData</innerclass>
    <innerclass refid="structwatch2_1_1imageData" prot="public">watch2::imageData</innerclass>
    <innerclass refid="structwatch2_1_1settingsMenuData" prot="public">watch2::settingsMenuData</innerclass>
    <innerclass refid="structwatch2_1_1stateMeta" prot="public">watch2::stateMeta</innerclass>
    <innerclass refid="structwatch2_1_1timerData" prot="public">watch2::timerData</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacewatch2_1aa87ecba8f47ac740569f637bb4ebfdb2" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* watch2::func) (void)</definition>
        <argsstring>)(void)</argsstring>
        <name>func</name>
        <briefdescription>
<para>function pointer type </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.h" line="294" column="13" bodyfile="main/watch2.h" bodystart="294" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacewatch2_1aa9a5ddda9ffca2f987f47b38d0c2bae9" prot="public" static="no" mutable="no">
        <type>SPIClass *</type>
        <definition>SPIClass * watch2::vspi</definition>
        <argsstring></argsstring>
        <name>vspi</name>
        <initializer>= new SPIClass(VSPI)</initializer>
        <briefdescription>
<para>VSPI object. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="18" column="14" bodyfile="main/watch2.cpp" bodystart="18" bodyend="-1" declfile="main/watch2.h" declline="297" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ae6409853423f64360383769753ee7b8e" prot="public" static="no" mutable="no">
        <type>TFT_eSPI</type>
        <definition>TFT_eSPI watch2::oled</definition>
        <argsstring></argsstring>
        <name>oled</name>
        <initializer>= TFT_eSPI()</initializer>
        <briefdescription>
<para>hw spi (use vspi or &amp;SPI) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="19" column="14" bodyfile="main/watch2.cpp" bodystart="19" bodyend="-1" declfile="main/watch2.h" declline="298" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a8be13348bd0da15ae712398954ef0b0f" prot="public" static="no" mutable="no">
        <type>Preferences</type>
        <definition>Preferences watch2::preferences</definition>
        <argsstring></argsstring>
        <name>preferences</name>
        <briefdescription>
<para>wrapper for esp32 nvs used to store system settings </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="20" column="17" bodyfile="main/watch2.cpp" bodystart="20" bodyend="-1" declfile="main/watch2.h" declline="299" declcolumn="24"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ab288b50bb5adac70cd29e5d78fab4eb2" prot="public" static="no" mutable="no">
        <type>TFT_eSprite</type>
        <definition>TFT_eSprite watch2::top_thing</definition>
        <argsstring></argsstring>
        <name>top_thing</name>
        <initializer>= TFT_eSprite(&amp;<ref refid="namespacewatch2_1ae6409853423f64360383769753ee7b8e" kindref="member">oled</ref>)</initializer>
        <briefdescription>
<para>the framebuffer that the top thing is drawn onto </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="23" column="17" bodyfile="main/watch2.cpp" bodystart="23" bodyend="-1" declfile="main/watch2.h" declline="303" declcolumn="24"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a8bb81d8e9196db680d282d8c1eed143f" prot="public" static="no" mutable="no">
        <type>TFT_eSprite</type>
        <definition>TFT_eSprite watch2::framebuffer</definition>
        <argsstring></argsstring>
        <name>framebuffer</name>
        <initializer>= TFT_eSprite(&amp;<ref refid="namespacewatch2_1ae6409853423f64360383769753ee7b8e" kindref="member">oled</ref>)</initializer>
        <briefdescription>
<para>another framebuffer that isn&apos;t used </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="24" column="17" bodyfile="main/watch2.cpp" bodystart="24" bodyend="-1" declfile="main/watch2.h" declline="304" declcolumn="24"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a76bee8147b61edfd44b2aabd60aa12e5" prot="public" static="no" mutable="no">
        <type>WiFiClientSecure</type>
        <definition>WiFiClientSecure watch2::wifi_client</definition>
        <argsstring></argsstring>
        <name>wifi_client</name>
        <briefdescription>
<para>the wifi client used for HTTP and HTTPS requests </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="25" column="22" bodyfile="main/watch2.cpp" bodystart="25" bodyend="-1" declfile="main/watch2.h" declline="305" declcolumn="29"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ae4c7ce4512c98733ca38c5137afd826e" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::vector&lt; unsigned short int &gt; &gt;</type>
        <definition>std::map&lt; std::string, std::vector&lt; unsigned short int &gt; &gt; watch2::icons</definition>
        <argsstring></argsstring>
        <name>icons</name>
        <briefdescription>
<para>large colour icons for things like the state menu </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="36" column="14" bodyfile="main/watch2.cpp" bodystart="36" bodyend="-1" declfile="main/watch2.h" declline="319" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1aefa95280b68ef3a334b5ef0e5f0ff644" prot="public" static="no" mutable="no">
        <type>std::map&lt; std::string, std::vector&lt; unsigned char &gt; &gt;</type>
        <definition>std::map&lt; std::string, std::vector&lt; unsigned char &gt; &gt; watch2::small_icons</definition>
        <argsstring></argsstring>
        <name>small_icons</name>
        <briefdescription>
<para>smaller monochrome icons for use within GUIs </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="37" column="14" bodyfile="main/watch2.cpp" bodystart="37" bodyend="-1" declfile="main/watch2.h" declline="320" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a9041b045415e4077f6046a01f9ee31be" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int watch2::state</definition>
        <argsstring></argsstring>
        <name>state</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>currently selected state </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="40" column="9" bodyfile="main/watch2.cpp" bodystart="40" bodyend="-1" declfile="main/watch2.h" declline="323" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ac13451e2babb790100abd526133d3d96" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int watch2::state_init</definition>
        <argsstring></argsstring>
        <name>state_init</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>0 if the state is being executed for the first time (after swtiching from another state) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="41" column="9" bodyfile="main/watch2.cpp" bodystart="41" bodyend="-1" declfile="main/watch2.h" declline="324" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1abb9f72959e5efa12ff8fff2cb0eca8cd" prot="public" static="no" mutable="no">
        <type>RTC_DATA_ATTR int</type>
        <definition>RTC_DATA_ATTR int watch2::selected_menu_icon</definition>
        <argsstring></argsstring>
        <name>selected_menu_icon</name>
        <briefdescription>
<para>index of currently selected state </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="42" column="23" bodyfile="main/watch2.cpp" bodystart="42" bodyend="-1" declfile="main/watch2.h" declline="325" declcolumn="30"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1abe2d907be91c141718e7556b098afdb0" prot="public" static="no" mutable="no">
        <type>RTC_DATA_ATTR int</type>
        <definition>RTC_DATA_ATTR int watch2::boot_count</definition>
        <argsstring></argsstring>
        <name>boot_count</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>no of times watch has woken up (including initial boot) boot count is used to keep track of what state was selected in the menu before entering deep sleep. This variable is only used when going in to or waking up from sleep. During active mode operation, selected_menu_icon is used, </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="43" column="23" bodyfile="main/watch2.cpp" bodystart="43" bodyend="-1" declfile="main/watch2.h" declline="326" declcolumn="30"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a537e061d07d7b4e7ebec72b3c2cf2eeb" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t watch2::top_thing_height</definition>
        <argsstring></argsstring>
        <name>top_thing_height</name>
        <initializer>= oled.fontHeight() + 20</initializer>
        <briefdescription>
<para>the height of the top thing (plus a small buffer) in pixels </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="44" column="13" bodyfile="main/watch2.cpp" bodystart="44" bodyend="-1" declfile="main/watch2.h" declline="331" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1aec1d807c429ed612b9e2564d3f19fd61" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::forceRedraw</definition>
        <argsstring></argsstring>
        <name>forceRedraw</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="45" column="10" bodyfile="main/watch2.cpp" bodystart="45" bodyend="-1" declfile="main/watch2.h" declline="332" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1aa1253cad423cdac80308225ba70a548d" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::forceRedrawLooped</definition>
        <argsstring></argsstring>
        <name>forceRedrawLooped</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="46" column="10" bodyfile="main/watch2.cpp" bodystart="46" bodyend="-1" declfile="main/watch2.h" declline="333" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a66ed60516d502fb6a059e321ec4aedf4" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t watch2::trans_mode</definition>
        <argsstring></argsstring>
        <name>trans_mode</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>pretty colour scheme </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="47" column="14" bodyfile="main/watch2.cpp" bodystart="47" bodyend="-1" declfile="main/watch2.h" declline="335" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a9554987e1f8a736606e18f04234a41d3" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::animate_watch_face</definition>
        <argsstring></argsstring>
        <name>animate_watch_face</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>whether or not animate the watch face </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="48" column="10" bodyfile="main/watch2.cpp" bodystart="48" bodyend="-1" declfile="main/watch2.h" declline="336" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1af0f31f7a918c6487fab7f6b32281cd28" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int watch2::short_timeout</definition>
        <argsstring></argsstring>
        <name>short_timeout</name>
        <initializer>= 5000</initializer>
        <briefdescription>
<para>timeout when looking at watch face </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="49" column="9" bodyfile="main/watch2.cpp" bodystart="49" bodyend="-1" declfile="main/watch2.h" declline="337" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a6740e1fc7a8ad0afca20315d6144e0c5" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int watch2::long_timeout</definition>
        <argsstring></argsstring>
        <name>long_timeout</name>
        <initializer>= 30000</initializer>
        <briefdescription>
<para>timeout (almost) everywhere else </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="50" column="9" bodyfile="main/watch2.cpp" bodystart="50" bodyend="-1" declfile="main/watch2.h" declline="338" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a2509cfea5337e3acc4868937f26c72c9" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::timeout</definition>
        <argsstring></argsstring>
        <name>timeout</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>whether or not to go to sleep after timeout time has elapsed </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="51" column="10" bodyfile="main/watch2.cpp" bodystart="51" bodyend="-1" declfile="main/watch2.h" declline="339" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1acaf0198d395f650241a2b89440c1fcf0" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int watch2::themecolour</definition>
        <argsstring></argsstring>
        <name>themecolour</name>
        <initializer>= <ref refid="watch2_8h_1a79d10e672abb49ad63eeaa8aaef57c38" kindref="member">BLUE</ref></initializer>
        <briefdescription>
<para>colour of the system accent </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="52" column="9" bodyfile="main/watch2.cpp" bodystart="52" bodyend="-1" declfile="main/watch2.h" declline="340" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a64d56a734ae2c70661dbe36604d06463" prot="public" static="no" mutable="no">
        <type>time_t</type>
        <definition>time_t watch2::alarm_snooze_time</definition>
        <argsstring></argsstring>
        <name>alarm_snooze_time</name>
        <initializer>= 5*60</initializer>
        <briefdescription>
<para>time to add to alarm when snoozing </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="53" column="12" bodyfile="main/watch2.cpp" bodystart="53" bodyend="-1" declfile="main/watch2.h" declline="341" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1afde7e7844aa64c1211edf103dbeb7013" prot="public" static="no" mutable="no">
        <type>uint16_t</type>
        <definition>uint16_t watch2::screen_brightness</definition>
        <argsstring></argsstring>
        <name>screen_brightness</name>
        <initializer>= 2^<ref refid="watch2_8h_1af87c395b63eae5c0f059628ece124a99" kindref="member">tftbl_resolution</ref></initializer>
        <briefdescription>
<para>brightness of screen, ranges from 0 (backlight off) to 15 (full brightness) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="54" column="14" bodyfile="main/watch2.cpp" bodystart="54" bodyend="-1" declfile="main/watch2.h" declline="342" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ad8211686a208f1ce1f5bc4b989d3bd38" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t watch2::speaker_volume</definition>
        <argsstring></argsstring>
        <name>speaker_volume</name>
        <initializer>= 10</initializer>
        <briefdescription>
<para>speaker volume, as controlled by audioI2S library. ranges from 0 (no sound) to 21 (loudest) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="55" column="13" bodyfile="main/watch2.cpp" bodystart="55" bodyend="-1" declfile="main/watch2.h" declline="343" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a1e8107643e44ee85cf755ea41fb42be5" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t watch2::torch_brightness</definition>
        <argsstring></argsstring>
        <name>torch_brightness</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>brightness of the torch LED (pwm controlled, ranges from 0 (off) to 255 (fill brightnesss)) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="56" column="13" bodyfile="main/watch2.cpp" bodystart="56" bodyend="-1" declfile="main/watch2.h" declline="344" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a61a6b2ef4ca89690552361fae75caa58" prot="public" static="no" mutable="no">
        <type>int8_t</type>
        <definition>int8_t watch2::timezone</definition>
        <argsstring></argsstring>
        <name>timezone</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>the user&apos;s timezone, in the format UTC+n </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="57" column="12" bodyfile="main/watch2.cpp" bodystart="57" bodyend="-1" declfile="main/watch2.h" declline="345" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a47317d180e2c6c025bdce795d051e537" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::ntp_wakeup_connect</definition>
        <argsstring></argsstring>
        <name>ntp_wakeup_connect</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>whether or not to attempt to get the time on wakeup </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="58" column="10" bodyfile="main/watch2.cpp" bodystart="58" bodyend="-1" declfile="main/watch2.h" declline="346" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1aaf3801873a811db92bb8c4f01384b5f8" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::ntp_boot_connect</definition>
        <argsstring></argsstring>
        <name>ntp_boot_connect</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>whether or not to attempt to get the time on boot </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="59" column="10" bodyfile="main/watch2.cpp" bodystart="59" bodyend="-1" declfile="main/watch2.h" declline="347" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a42daca29a612a98a3eb574263ced8d08" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::ntp_boot_connected</definition>
        <argsstring></argsstring>
        <name>ntp_boot_connected</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>whether or not the time has been retrieved on boot </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="60" column="10" bodyfile="main/watch2.cpp" bodystart="60" bodyend="-1" declfile="main/watch2.h" declline="348" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1aafc46f375374472f54881395c08e9eae" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::wifi_wakeup_reconnect</definition>
        <argsstring></argsstring>
        <name>wifi_wakeup_reconnect</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>whether or not to attempt to reconnect to wifi on wake up (if not already connected) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="61" column="10" bodyfile="main/watch2.cpp" bodystart="61" bodyend="-1" declfile="main/watch2.h" declline="349" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a21b1fb2980cdf754b51ddbfda2c947bc" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::wifi_boot_reconnect</definition>
        <argsstring></argsstring>
        <name>wifi_boot_reconnect</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>whether or not to attemp to connect to wifi on boot </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="62" column="10" bodyfile="main/watch2.cpp" bodystart="62" bodyend="-1" declfile="main/watch2.h" declline="350" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a67ee1941a7924bcd13da2619f884209e" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::wifi_enabled</definition>
        <argsstring></argsstring>
        <name>wifi_enabled</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether or not wifi is enabled. don&apos;t use this if you actually want to know if the system is connected to wifi, for that use wifi_state. this is only used to decide whether or not to enable wifi automatically on boot </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="63" column="10" bodyfile="main/watch2.cpp" bodystart="63" bodyend="-1" declfile="main/watch2.h" declline="351" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a76d4a1ffa3d4cc1bc924a5cde5f7d969" prot="public" static="no" mutable="no">
        <type>wifi_auth_mode_t</type>
        <definition>wifi_auth_mode_t watch2::wifi_encryption</definition>
        <argsstring></argsstring>
        <name>wifi_encryption</name>
        <initializer>= WIFI_AUTH_MAX</initializer>
        <briefdescription>
<para>hack hack hack hack pls replace with a way to get the encryption type of the current AP </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="64" column="22" bodyfile="main/watch2.cpp" bodystart="64" bodyend="-1" declfile="main/watch2.h" declline="354" declcolumn="29"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a4815946828c48e88f07713b1d5ec7a48" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t watch2::bluetooth_state</definition>
        <argsstring></argsstring>
        <name>bluetooth_state</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>keeps track of the state of the bluetooth subsystem 0 - disabled 1 - enabling 2 - enabled, disconnected 3 - enabled, connected </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="65" column="13" bodyfile="main/watch2.cpp" bodystart="65" bodyend="-1" declfile="main/watch2.h" declline="413" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a7ccf8061985f2827c2ef349824540912" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::ble_set_up</definition>
        <argsstring></argsstring>
        <name>ble_set_up</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>has the ble server been created? </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="66" column="10" bodyfile="main/watch2.cpp" bodystart="66" bodyend="-1" declfile="main/watch2.h" declline="418" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ad16fa0185024051970215be8fc3f852d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int watch2::sd_state</definition>
        <argsstring></argsstring>
        <name>sd_state</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>state of the sd card 0 - not initalised (red) 1 - initalised with no errors (green) 2 - card not present (blue) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="67" column="9" bodyfile="main/watch2.cpp" bodystart="67" bodyend="-1" declfile="main/watch2.h" declline="357" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a725ee65f85004596007089833f00a8f4" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::spiffs_state</definition>
        <argsstring></argsstring>
        <name>spiffs_state</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the state of the spiffs -1 - failed to initalise 0 - not initalised 1 - initalised successfully </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="68" column="10" bodyfile="main/watch2.cpp" bodystart="68" bodyend="-1" declfile="main/watch2.h" declline="361" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1aef58f47536af7a57decc06deb486255c" prot="public" static="no" mutable="no">
        <type>int RTC_DATA_ATTR</type>
        <definition>int RTC_DATA_ATTR watch2::stopwatch_timing</definition>
        <argsstring></argsstring>
        <name>stopwatch_timing</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>stopwatch state 0 - stopped 1 - running 2 - paused </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="69" column="23" bodyfile="main/watch2.cpp" bodystart="69" bodyend="-1" declfile="main/watch2.h" declline="365" declcolumn="30"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a699555f6792b055d017177f6e57d0932" prot="public" static="no" mutable="no">
        <type>uint32_t RTC_DATA_ATTR</type>
        <definition>uint32_t RTC_DATA_ATTR watch2::stopwatch_epoch</definition>
        <argsstring></argsstring>
        <name>stopwatch_epoch</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>time when the stopwatch was started </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="70" column="28" bodyfile="main/watch2.cpp" bodystart="70" bodyend="-1" declfile="main/watch2.h" declline="369" declcolumn="35"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1abbeef3cdd7b201162eea9c34a9c9ab00" prot="public" static="no" mutable="no">
        <type>uint32_t RTC_DATA_ATTR</type>
        <definition>uint32_t RTC_DATA_ATTR watch2::stopwatch_paused_diff</definition>
        <argsstring></argsstring>
        <name>stopwatch_paused_diff</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>when the stopwatch is off or paused, stopwatch_epoch is set to the current time minus this value when the stopwatch is paused, this value is set to the difference between stopwatch_epoch and the current time (keeps the difference constant) when the stopwatch is off, this value is set to 0 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="71" column="28" bodyfile="main/watch2.cpp" bodystart="71" bodyend="-1" declfile="main/watch2.h" declline="370" declcolumn="35"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a2c60ff68ba05b03b77584b37b8d60726" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t watch2::stopwatch_time_diff</definition>
        <argsstring></argsstring>
        <name>stopwatch_time_diff</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>difference between epoch and current time (equivalent to elapsed time) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="72" column="14" bodyfile="main/watch2.cpp" bodystart="72" bodyend="-1" declfile="main/watch2.h" declline="373" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a61a1508035cc86581b9671c0b8ecd54f" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t watch2::stopwatch_last_time_diff</definition>
        <argsstring></argsstring>
        <name>stopwatch_last_time_diff</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>last time diff (used for checking when to redraw elapsed time) </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="73" column="14" bodyfile="main/watch2.cpp" bodystart="73" bodyend="-1" declfile="main/watch2.h" declline="374" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ac38b97872a5767e32ac4c23bbadd6cd5" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t watch2::stopwatch_ms</definition>
        <argsstring></argsstring>
        <name>stopwatch_ms</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="74" column="14" bodyfile="main/watch2.cpp" bodystart="74" bodyend="-1" declfile="main/watch2.h" declline="375" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1aec8f0b62a31a2f7fd0effcb8ec8e45fd" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t watch2::stopwatch_last_ms</definition>
        <argsstring></argsstring>
        <name>stopwatch_last_ms</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="74" column="28" bodyfile="main/watch2.cpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1afc91414b3ef869ba9f2b4ae88031ca41" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t watch2::stopwatch_s</definition>
        <argsstring></argsstring>
        <name>stopwatch_s</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="75" column="14" bodyfile="main/watch2.cpp" bodystart="75" bodyend="-1" declfile="main/watch2.h" declline="376" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a2bec6f58b6f8c4a6ed52cfb52e138355" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t watch2::stopwatch_last_s</definition>
        <argsstring></argsstring>
        <name>stopwatch_last_s</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="75" column="27" bodyfile="main/watch2.cpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a6700f7606c3cac7d9a13026cde84e6cd" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t watch2::stopwatch_min</definition>
        <argsstring></argsstring>
        <name>stopwatch_min</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="76" column="14" bodyfile="main/watch2.cpp" bodystart="76" bodyend="-1" declfile="main/watch2.h" declline="377" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a476169febfbb69900d8421da3783a510" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t watch2::stopwatch_last_min</definition>
        <argsstring></argsstring>
        <name>stopwatch_last_min</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="76" column="29" bodyfile="main/watch2.cpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a88c034a2d436630f706bd0efb4abe38a" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t watch2::stopwatch_hour</definition>
        <argsstring></argsstring>
        <name>stopwatch_hour</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="77" column="14" bodyfile="main/watch2.cpp" bodystart="77" bodyend="-1" declfile="main/watch2.h" declline="378" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a6686267ed78a023b73890a96a291a836" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t watch2::stopwatch_last_hour</definition>
        <argsstring></argsstring>
        <name>stopwatch_last_hour</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="77" column="30" bodyfile="main/watch2.cpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1acb28fa05bd9a254434da96319d23d0ef" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structwatch2_1_1timerData" kindref="compound">timerData</ref> &gt;</type>
        <definition>std::vector&lt; timerData &gt; watch2::timers</definition>
        <argsstring></argsstring>
        <name>timers</name>
        <briefdescription>
<para>vector to store timers </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="79" column="17" bodyfile="main/watch2.cpp" bodystart="79" bodyend="-1" declfile="main/watch2.h" declline="380" declcolumn="24"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a61483a9da1862e9944de5beeb8dd0263" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structwatch2_1_1alarmData" kindref="compound">alarmData</ref> &gt;</type>
        <definition>std::vector&lt; alarmData &gt; watch2::alarms</definition>
        <argsstring></argsstring>
        <name>alarms</name>
        <briefdescription>
<para>vector to store alarms </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="80" column="17" bodyfile="main/watch2.cpp" bodystart="80" bodyend="-1" declfile="main/watch2.h" declline="381" declcolumn="24"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ac86eece4f0ab13d169bd0777abd490be" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int watch2::timer_trigger_status</definition>
        <argsstring></argsstring>
        <name>timer_trigger_status</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>the state of a timer 0 - timer not going off → normal state execution 1 - timer going off → suspend state execution and draw alarm message 2 - timer gone off → wait for user input before resuming state execution </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="81" column="9" bodyfile="main/watch2.cpp" bodystart="81" bodyend="-1" declfile="main/watch2.h" declline="382" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ae6855e665dadb06d4400e7bdb6a1c6e4" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int watch2::timer_trigger_id</definition>
        <argsstring></argsstring>
        <name>timer_trigger_id</name>
        <initializer>= 255</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="82" column="9" bodyfile="main/watch2.cpp" bodystart="82" bodyend="-1" declfile="main/watch2.h" declline="386" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a62c221ef0bd8cc02607b01319f616818" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int watch2::alarm_trigger_status</definition>
        <argsstring></argsstring>
        <name>alarm_trigger_status</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="83" column="9" bodyfile="main/watch2.cpp" bodystart="83" bodyend="-1" declfile="main/watch2.h" declline="387" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ac558b18a4bc10faabbbbf43fd3015e40" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int watch2::alarm_trigger_id</definition>
        <argsstring></argsstring>
        <name>alarm_trigger_id</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="84" column="9" bodyfile="main/watch2.cpp" bodystart="84" bodyend="-1" declfile="main/watch2.h" declline="388" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a636529f423a7b5d4ce6b78c3b6a7d1f3" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int watch2::file_select_status</definition>
        <argsstring></argsstring>
        <name>file_select_status</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>whether or not to show the file select menu 0 - don&apos;t show the menu. the current state (or alarm or timer dialogue) will show instead 1 - do show the dialog </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="86" column="9" bodyfile="main/watch2.cpp" bodystart="86" bodyend="-1" declfile="main/watch2.h" declline="390" declcolumn="16"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ad027d41ccaa7343a8e6697ddb65dabd2" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string watch2::file_path</definition>
        <argsstring></argsstring>
        <name>file_path</name>
        <initializer>= &quot;/&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>if the file select menu is active, this is used to keep track of the current directory. otherwise, it is used to store the path of the file after file selection (or &quot;canceled&quot; if no file was selected) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="87" column="17" bodyfile="main/watch2.cpp" bodystart="87" bodyend="-1" declfile="main/watch2.h" declline="393" declcolumn="24"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a48f9d0abe5f1f6481fb76a75471084fa" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::file_select_dir_list_init</definition>
        <argsstring></argsstring>
        <name>file_select_dir_list_init</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>keeps track of whether or not the file list has been initalised for the current directory </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="88" column="10" bodyfile="main/watch2.cpp" bodystart="88" bodyend="-1" declfile="main/watch2.h" declline="395" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1aff7ef1c423d87bd2b88d8e6840a4625d" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t watch2::wifi_state</definition>
        <argsstring></argsstring>
        <name>wifi_state</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>keeps track of whether or not the user has enabled the wifi 0 - disabled by user 1 - enabled by user, idle / disconnected 2 - enabled by user, connecting 3 - enabled by user, connected 4 - enabled by user, pls connect asap (used when connecting to an AP after booting) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="90" column="13" bodyfile="main/watch2.cpp" bodystart="90" bodyend="-1" declfile="main/watch2.h" declline="397" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a356780c64b647870d29334a40b876f25" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t watch2::wifi_reconnect_attempts</definition>
        <argsstring></argsstring>
        <name>wifi_reconnect_attempts</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>how many more times to attempt to connect to the next most recently connected AP. if this isn&apos;t zero, and wifi state is set to 4, the system will try to connect to an AP, starting with the one what was connected to most recently. if the system can&apos;t connect to that AP, it will decrement this number, and try to connect to the next most recently connected AP, until this number reaches zero, of the system runs out of saved profiles. if you set this variable, make sure to set initial_wifi_reconnect_attempts to the same value. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="91" column="13" bodyfile="main/watch2.cpp" bodystart="91" bodyend="-1" declfile="main/watch2.h" declline="403" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ab762484d6b1e20e9c88f8eb221b8cfe7" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t watch2::initial_wifi_reconnect_attempts</definition>
        <argsstring></argsstring>
        <name>initial_wifi_reconnect_attempts</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>this variable should reflect that value that wifi_reconnect_attempts started off as. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="92" column="13" bodyfile="main/watch2.cpp" bodystart="92" bodyend="-1" declfile="main/watch2.h" declline="409" declcolumn="20"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a661280a34de674636157f4afa93c7496" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t watch2::wifi_connect_timeout</definition>
        <argsstring></argsstring>
        <name>wifi_connect_timeout</name>
        <initializer>= 15000</initializer>
        <briefdescription>
<para>how long to wait before giving up on connecting to a wifi network, in milliseconds </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="93" column="14" bodyfile="main/watch2.cpp" bodystart="93" bodyend="-1" declfile="main/watch2.h" declline="410" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a34c26588d1e8aa56f6f9453b59160f7d" prot="public" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t watch2::wifi_connect_timeout_start</definition>
        <argsstring></argsstring>
        <name>wifi_connect_timeout_start</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>used to keep track of time when connecting to a wifi network </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="94" column="14" bodyfile="main/watch2.cpp" bodystart="94" bodyend="-1" declfile="main/watch2.h" declline="411" declcolumn="21"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ae8c26ee76d3b1e60257436c4392a6a43" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::dpad_up_lock</definition>
        <argsstring></argsstring>
        <name>dpad_up_lock</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="96" column="10" bodyfile="main/watch2.cpp" bodystart="96" bodyend="-1" declfile="main/watch2.h" declline="423" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a02564275e9ce28f87fefb6dae6a928d7" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::dpad_down_lock</definition>
        <argsstring></argsstring>
        <name>dpad_down_lock</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="97" column="10" bodyfile="main/watch2.cpp" bodystart="97" bodyend="-1" declfile="main/watch2.h" declline="424" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1aa9a118089c42b9bbf14f86b6a5928dda" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::dpad_left_lock</definition>
        <argsstring></argsstring>
        <name>dpad_left_lock</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="98" column="10" bodyfile="main/watch2.cpp" bodystart="98" bodyend="-1" declfile="main/watch2.h" declline="425" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a5d4921f0bd262bde4dc8fc45b9efea31" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::dpad_right_lock</definition>
        <argsstring></argsstring>
        <name>dpad_right_lock</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="99" column="10" bodyfile="main/watch2.cpp" bodystart="99" bodyend="-1" declfile="main/watch2.h" declline="426" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a87ab5b186679667ed01a17475f8f21d9" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool watch2::dpad_enter_lock</definition>
        <argsstring></argsstring>
        <name>dpad_enter_lock</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="100" column="10" bodyfile="main/watch2.cpp" bodystart="100" bodyend="-1" declfile="main/watch2.h" declline="427" declcolumn="17"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a9be4da23a4b1f3f997e1f37c38c898ce" prot="public" static="no" mutable="no">
        <type>SdFat</type>
        <definition>SdFat watch2::SD</definition>
        <argsstring></argsstring>
        <name>SD</name>
        <briefdescription>
<para>instance of SdFat used to access the sd card </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.h" line="300" column="18" declfile="main/watch2.h" declline="300" declcolumn="18"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1ad29f2114a37239e2ea46b5f2d8389cf8" prot="public" static="no" mutable="no">
        <type>BleKeyboard</type>
        <definition>BleKeyboard watch2::ble_keyboard</definition>
        <argsstring></argsstring>
        <name>ble_keyboard</name>
        <briefdescription>
<para>a thing that handles BLE HID Keyboard stuff </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.h" line="306" column="24" declfile="main/watch2.h" declline="306" declcolumn="24"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1aede9a8b6e03a28632e12e9b256737af1" prot="public" static="no" mutable="no">
        <type>Button</type>
        <definition>Button watch2::btn_dpad_up</definition>
        <argsstring></argsstring>
        <name>btn_dpad_up</name>
        <briefdescription>
<para>the object that handles the dpad up button </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.h" line="309" column="19" declfile="main/watch2.h" declline="309" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a58d4c19d81445654b5ce3a6fc0e119fa" prot="public" static="no" mutable="no">
        <type>Button</type>
        <definition>Button watch2::btn_dpad_down</definition>
        <argsstring></argsstring>
        <name>btn_dpad_down</name>
        <briefdescription>
<para>the object that handles the dpad down button </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.h" line="310" column="19" declfile="main/watch2.h" declline="310" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a223e8a511c002ef6cb2a51510dd6a7d5" prot="public" static="no" mutable="no">
        <type>Button</type>
        <definition>Button watch2::btn_dpad_left</definition>
        <argsstring></argsstring>
        <name>btn_dpad_left</name>
        <briefdescription>
<para>the object that handles the dpad left button </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.h" line="311" column="19" declfile="main/watch2.h" declline="311" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a16b4d3f6bd2989ed2baaa3685d5472aa" prot="public" static="no" mutable="no">
        <type>Button</type>
        <definition>Button watch2::btn_dpad_right</definition>
        <argsstring></argsstring>
        <name>btn_dpad_right</name>
        <briefdescription>
<para>the object that handles the dpad right button </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.h" line="312" column="19" declfile="main/watch2.h" declline="312" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a9a4d61fc7c15f4470b7a1abda63cc186" prot="public" static="no" mutable="no">
        <type>Button</type>
        <definition>Button watch2::btn_dpad_enter</definition>
        <argsstring></argsstring>
        <name>btn_dpad_enter</name>
        <briefdescription>
<para>the object that handles the dpad enter button </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.h" line="313" column="19" declfile="main/watch2.h" declline="313" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a71b6878ae2b4e2c47784b7d0d89caa2c" prot="public" static="no" mutable="no">
        <type>Button</type>
        <definition>Button watch2::btn_zero</definition>
        <argsstring></argsstring>
        <name>btn_zero</name>
        <briefdescription>
<para>the object that handles GPIO0 input </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.h" line="314" column="19" declfile="main/watch2.h" declline="314" declcolumn="19"/>
      </memberdef>
      <memberdef kind="variable" id="namespacewatch2_1a27dff5ca3a635759520c23e5d32f401c" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structwatch2_1_1stateMeta" kindref="compound">stateMeta</ref> &gt;</type>
        <definition>std::vector&lt;stateMeta&gt; watch2::states</definition>
        <argsstring></argsstring>
        <name>states</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.h" line="316" column="24" declfile="main/watch2.h" declline="316" declcolumn="24"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacewatch2_1ab88fed9288b860dd9658ec25fc7c0314" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BleKeyboard</type>
        <definition>BleKeyboard watch2::ble_keyboard</definition>
        <argsstring>(&quot;watch2&quot;, &quot;atctwo&quot;)</argsstring>
        <name>ble_keyboard</name>
        <param>
          <type>&quot;watch2&quot;</type>
        </param>
        <param>
          <type>&quot;atctwo&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="26" column="17" declfile="main/watch2.cpp" declline="26" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1aa244b9902f9c0ba0c2c9593c051ffd04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Button</type>
        <definition>Button watch2::btn_dpad_up</definition>
        <argsstring>(dpad_up, 25, false, false)</argsstring>
        <name>btn_dpad_up</name>
        <param>
          <type><ref refid="watch2_8h_1a47d68905fb8bc1a85644b4e8007b7b0c" kindref="member">dpad_up</ref></type>
        </param>
        <param>
          <type>25</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="29" column="12" declfile="main/watch2.cpp" declline="29" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ac6cc565666380c1c7669ba14cefb2835" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Button</type>
        <definition>Button watch2::btn_dpad_down</definition>
        <argsstring>(dpad_down, 25, false, false)</argsstring>
        <name>btn_dpad_down</name>
        <param>
          <type><ref refid="watch2_8h_1a20184c372e573af3754fc360d9fc8976" kindref="member">dpad_down</ref></type>
        </param>
        <param>
          <type>25</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="30" column="12" declfile="main/watch2.cpp" declline="30" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a0a9b5f353b04f234f3f6fdc035d6d33f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Button</type>
        <definition>Button watch2::btn_dpad_left</definition>
        <argsstring>(dpad_left, 25, false, false)</argsstring>
        <name>btn_dpad_left</name>
        <param>
          <type><ref refid="watch2_8h_1aa1410a5a4a63f9e503347a0e44723379" kindref="member">dpad_left</ref></type>
        </param>
        <param>
          <type>25</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="31" column="12" declfile="main/watch2.cpp" declline="31" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1af109e1e5be3c928634f2a339825d495d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Button</type>
        <definition>Button watch2::btn_dpad_right</definition>
        <argsstring>(dpad_right, 25, false, false)</argsstring>
        <name>btn_dpad_right</name>
        <param>
          <type><ref refid="watch2_8h_1a968c324db648adac2aa07cc0b2e2708e" kindref="member">dpad_right</ref></type>
        </param>
        <param>
          <type>25</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="32" column="12" declfile="main/watch2.cpp" declline="32" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a50b26339dca0b7dd667fd5c8504c3c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Button</type>
        <definition>Button watch2::btn_dpad_enter</definition>
        <argsstring>(dpad_enter, 25, false, false)</argsstring>
        <name>btn_dpad_enter</name>
        <param>
          <type><ref refid="watch2_8h_1abe777e85a3a317207c3cc75dc83430e3" kindref="member">dpad_enter</ref></type>
        </param>
        <param>
          <type>25</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <param>
          <type>false</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="33" column="12" declfile="main/watch2.cpp" declline="33" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ae97f9f7dc2b55562ab0f9b5bb8920387" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Button</type>
        <definition>Button watch2::btn_zero</definition>
        <argsstring>(0)</argsstring>
        <name>btn_zero</name>
        <param>
          <type>0</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="34" column="12" declfile="main/watch2.cpp" declline="34" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ad93182730d153ab0ef41c7abeb0dd496" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::startLoop</definition>
        <argsstring>()</argsstring>
        <name>startLoop</name>
        <briefdescription>
<para>does all the things that need to be done at the start of each loop </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="102" column="10" bodyfile="main/watch2.cpp" bodystart="102" bodyend="117" declfile="main/watch2.h" declline="435" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a7dd335db221ae4468aca205f9503d701" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::endLoop</definition>
        <argsstring>()</argsstring>
        <name>endLoop</name>
        <briefdescription>
<para>does all the things that need to be done at the end of each loop </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="119" column="10" bodyfile="main/watch2.cpp" bodystart="119" bodyend="354" declfile="main/watch2.h" declline="440" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ad5f28b9617e94aa356abc56a2f7b438a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::drawTopThing</definition>
        <argsstring>(bool light=false)</argsstring>
        <name>drawTopThing</name>
        <param>
          <type>bool</type>
          <declname>light</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>draw the status bar at the top of the page. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>light</parametername>
</parameternamelist>
<parameterdescription>
<para>if this is true, only the status icons will be drawn. otherwise, everything will be drawn </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="357" column="10" bodyfile="main/watch2.cpp" bodystart="357" bodyend="502" declfile="main/watch2.h" declline="446" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a0f2f1e10687bcdb6c6d86245a31675b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool watch2::registerIcon</definition>
        <argsstring>(std::string iconName, std::vector&lt; unsigned short int &gt; icon)</argsstring>
        <name>registerIcon</name>
        <param>
          <type>std::string</type>
          <declname>iconName</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned short int &gt;</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
<para>add an icon to the list of 16 bit colour icons. this icon store is usually used to store things like app icons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iconName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the icon that will be used to access it later </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector or array of unsigned short ints that represent the icon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="504" column="10" bodyfile="main/watch2.cpp" bodystart="504" bodyend="509" declfile="main/watch2.h" declline="453" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1abf3f27c5409410bfcdbb0a9dda71cab1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool watch2::registerSmallIcon</definition>
        <argsstring>(std::string iconName, std::vector&lt; unsigned char &gt; icon)</argsstring>
        <name>registerSmallIcon</name>
        <param>
          <type>std::string</type>
          <declname>iconName</declname>
        </param>
        <param>
          <type>std::vector&lt; unsigned char &gt;</type>
          <declname>icon</declname>
        </param>
        <briefdescription>
<para>add an icon to the list of smaller 8 bit monochrome icons. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iconName</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the icon that will be used to access it later </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>icon</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector or array of unsigned chars that represent the icon </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="511" column="10" bodyfile="main/watch2.cpp" bodystart="511" bodyend="516" declfile="main/watch2.h" declline="460" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a786f5e96c939f6465c2341a31cad1385" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::switchState</definition>
        <argsstring>(int newState, int variant=0, int dim_pause_thing=250, int bright_pause_thing=250, bool dont_draw_first_frame=false)</argsstring>
        <name>switchState</name>
        <param>
          <type>int</type>
          <declname>newState</declname>
        </param>
        <param>
          <type>int</type>
          <declname>variant</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>dim_pause_thing</declname>
          <defval>250</defval>
        </param>
        <param>
          <type>int</type>
          <declname>bright_pause_thing</declname>
          <defval>250</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>dont_draw_first_frame</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>switch to a different state or app. </para>
        </briefdescription>
        <detaileddescription>
<para>this method lets you switch from running the current state, to another state (or the current state, but using a different variant).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newState</parametername>
</parameternamelist>
<parameterdescription>
<para>the id of the state to switch to. the state menu will always be state 2 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>variant</parametername>
</parameternamelist>
<parameterdescription>
<para>the state variant to switch to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dim_pause_thing</parametername>
</parameternamelist>
<parameterdescription>
<para>the time that should be taken to fade out the current state </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bright_pause_thing</parametername>
</parameternamelist>
<parameterdescription>
<para>the time that should be taken to fade in the new state </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dont_draw_first_frame</parametername>
</parameternamelist>
<parameterdescription>
<para>normally, the new state function is executed once before it is faded in. set this to true to stop this. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="518" column="10" bodyfile="main/watch2.cpp" bodystart="518" bodyend="543" declfile="main/watch2.h" declline="480" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a380f7785dd2e5ae7998aebd909b52450" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::dimScreen</definition>
        <argsstring>(bool direction, int pause_thing)</argsstring>
        <name>dimScreen</name>
        <param>
          <type>bool</type>
          <declname>direction</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pause_thing</declname>
        </param>
        <briefdescription>
<para>dim or make brighter the screen. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>direction</parametername>
</parameternamelist>
<parameterdescription>
<para>if this is false, the screen will dim. if this is true, the screen will increase in brightness </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pause_thing</parametername>
</parameternamelist>
<parameterdescription>
<para>the time it should take to fade the screen </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="545" column="10" bodyfile="main/watch2.cpp" bodystart="545" bodyend="561" declfile="main/watch2.h" declline="467" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ad1008a0c7100f3638c11445e9d27befd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::deepSleep</definition>
        <argsstring>(int pause_thing=10)</argsstring>
        <name>deepSleep</name>
        <param>
          <type>int</type>
          <declname>pause_thing</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
<para>puts the system in sleep mode. </para>
        </briefdescription>
        <detaileddescription>
<para>this turns off most of the ESP32&apos;s peripherals, and internally uses the ESP32&apos;s light sleep system. this handles things before and after sleeping. this function will automatically handle fading out the screen. i don&apos;t know what else to write... aaa! i am bored! wow!</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pause_thing</parametername>
</parameternamelist>
<parameterdescription>
<para>the time that it should take for the screen to fade out </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="563" column="10" bodyfile="main/watch2.cpp" bodystart="563" bodyend="666" declfile="main/watch2.h" declline="490" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a2cc92d218e6a0018de825886ad127676" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::drawMenu</definition>
        <argsstring>(int x, int y, int width, int height, std::vector&lt; std::string &gt; items, int selected, bool scroll=true, int colour=themecolour)</argsstring>
        <name>drawMenu</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>items</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selected</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>scroll</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>int</type>
          <declname>colour</declname>
          <defval><ref refid="namespacewatch2_1acaf0198d395f650241a2b89440c1fcf0" kindref="member">themecolour</ref></defval>
        </param>
        <briefdescription>
<para>draws a scrollable menu to the screen. </para>
        </briefdescription>
        <detaileddescription>
<para>the menu looks like lots of rectangles on top of each other, and one &quot;item&quot; can be highlighted at a time. you pass an array or vector of strings, and each string is drawn inside one of these rectangles. you can also pass a selected index, which determines which rectangle is highlighted. this function doesn&apos;t handle button presses, so you have to write your own logic to determine when to change the selected index, or what to do when the enter button is pressed.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position to draw the menu at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position to draw the menu at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the menu </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the menu </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector or array of std::strings that make up the menu items </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selected</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the selected menu item </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scroll</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not the menu should scroll when the selected item is beyond a certain threshold that i can&apos;t remember </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>the colour the menu should be drawn. by default, this will be the theme colour </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="668" column="10" bodyfile="main/watch2.cpp" bodystart="668" bodyend="796" declfile="main/watch2.h" declline="509" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a64d58e09651a56337743fd4a604875bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::drawSettingsMenu</definition>
        <argsstring>(int x, int y, int width, int height, std::vector&lt; settingsMenuData &gt; items, int selected, int colour=themecolour)</argsstring>
        <name>drawSettingsMenu</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <param>
          <type>int</type>
          <declname>height</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structwatch2_1_1settingsMenuData" kindref="compound">settingsMenuData</ref> &gt;</type>
          <declname>items</declname>
        </param>
        <param>
          <type>int</type>
          <declname>selected</declname>
        </param>
        <param>
          <type>int</type>
          <declname>colour</declname>
          <defval><ref refid="namespacewatch2_1acaf0198d395f650241a2b89440c1fcf0" kindref="member">themecolour</ref></defval>
        </param>
        <briefdescription>
<para>draws a settings menu. </para>
        </briefdescription>
        <detaileddescription>
<para>this draws a menu where there are lots of prompts, and each prompt has a spinner thing beside it. the spinner can have multiple different options, which the user can choose from. you pass an array or vector of <computeroutput><ref refid="structwatch2_1_1settingsMenuData" kindref="compound">settingsMenuData</ref></computeroutput> structs, which describe the prompt, the possible options for the spinner, and some other settings. this function doesn&apos;t handle any keypresses, so it&apos;s up to the developer to change the selected index, and selected options.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position to draw the menu at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position to draw the menu at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>width</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the menu </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>height</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the menu </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>items</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector or array of <computeroutput><ref refid="structwatch2_1_1settingsMenuData" kindref="compound">settingsMenuData</ref></computeroutput> structs </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>selected</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the selected <computeroutput><ref refid="structwatch2_1_1settingsMenuData" kindref="compound">settingsMenuData</ref></computeroutput> struct </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>the colour that the menu should be drawn. by default, this will be the theme colour </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="798" column="10" bodyfile="main/watch2.cpp" bodystart="798" bodyend="870" declfile="main/watch2.h" declline="526" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1aaca631f9121ac7f12ad6ba982e9636a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt; std::string &gt; watch2::getDirFiles</definition>
        <argsstring>(std::string path)</argsstring>
        <name>getDirFiles</name>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>method to return all the files in a directory (non-recursively). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path of the directory to return files in </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="872" column="17" bodyfile="main/watch2.cpp" bodystart="872" bodyend="946" declfile="main/watch2.h" declline="532" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ad3c8dbc95c3ea8d13157c707b402498d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string watch2::beginFileSelect</definition>
        <argsstring>(std::string path=&quot;/&quot;)</argsstring>
        <name>beginFileSelect</name>
        <param>
          <type>std::string</type>
          <declname>path</declname>
          <defval>&quot;/&quot;</defval>
        </param>
        <briefdescription>
<para>open the file select dialogue. this will pause the state until a file has been selected (or the operation has been cancelled). </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to start the file selection at </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="948" column="17" bodyfile="main/watch2.cpp" bodystart="948" bodyend="1115" declfile="main/watch2.h" declline="538" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a8a542732f9fd292a263048ef3abef5a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string watch2::dir_name</definition>
        <argsstring>(std::string file_path_thing)</argsstring>
        <name>dir_name</name>
        <param>
          <type>std::string</type>
          <declname>file_path_thing</declname>
        </param>
        <briefdescription>
<para>gets the directory part of a file path. </para>
        </briefdescription>
        <detaileddescription>
<para>for example, if you pass <computeroutput>/images/ir/pause.bmp</computeroutput>, this function will return <computeroutput>/images/ir/</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_path_thing</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to get the directory part of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string the path part of the directory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1117" column="17" bodyfile="main/watch2.cpp" bodystart="1117" bodyend="1139" declfile="main/watch2.h" declline="548" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a16a76b7c1664159fb4e6ec58c237a8e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string watch2::file_ext</definition>
        <argsstring>(std::string file_path_thing)</argsstring>
        <name>file_ext</name>
        <param>
          <type>std::string</type>
          <declname>file_path_thing</declname>
        </param>
        <briefdescription>
<para>gets the extension of a file name. </para>
        </briefdescription>
        <detaileddescription>
<para>for example, if you pass <computeroutput>/images/ir/pause.bmp</computeroutput>, this function will return <computeroutput>bmp</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_path_thing</parametername>
</parameternamelist>
<parameterdescription>
<para>the filename to get the extension of </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string the extension </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1141" column="17" bodyfile="main/watch2.cpp" bodystart="1141" bodyend="1159" declfile="main/watch2.h" declline="558" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a76d2f3a056a3b71c912880d5d794b63e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string watch2::textFieldDialogue</definition>
        <argsstring>(std::string prompt=&quot;&quot;, const char *default_input=&quot;&quot;, const char mask=0, bool clear_screen=true)</argsstring>
        <name>textFieldDialogue</name>
        <param>
          <type>std::string</type>
          <declname>prompt</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>default_input</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const char</type>
          <declname>mask</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>clear_screen</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>gets a string from the user. </para>
        </briefdescription>
        <detaileddescription>
<para>this will open a popup dialogue that will ask the user for a text-based input. a tiny keyboard will also be drawn on screen. this function blocks the calling code, and automatically handles dpad input.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>prompt</parametername>
</parameternamelist>
<parameterdescription>
<para>a prompt for what should be entered </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>default_input</parametername>
</parameternamelist>
<parameterdescription>
<para>the text field will be populated with this when the dialogue opens </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>if this isn&apos;t 0, all the characters in the text field will be drawn with whatever character is passed. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clear_screen</parametername>
</parameternamelist>
<parameterdescription>
<para>if this is true, the screen will be cleared when the dialogue closes (any part of the calling state that is wrapped with the <computeroutput>draw</computeroutput> macro will be redrawn after the dialgoue closes irrespective of this parameter). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>std::string the string that the user entered. if the user cancelled the input, this will return &quot;&quot;. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1161" column="17" bodyfile="main/watch2.cpp" bodystart="1161" bodyend="1477" declfile="main/watch2.h" declline="573" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a17796689b24edf89dccd54c8df261818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t watch2::messageBox</definition>
        <argsstring>(const char *msg, std::vector&lt; const char * &gt; btns={&quot;Ok&quot;}, bool clear_screen=true, uint16_t colour=themecolour)</argsstring>
        <name>messageBox</name>
        <param>
          <type>const char *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>std::vector&lt; const char * &gt;</type>
          <declname>btns</declname>
          <defval>{&quot;Ok&quot;}</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>clear_screen</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>colour</declname>
          <defval><ref refid="namespacewatch2_1acaf0198d395f650241a2b89440c1fcf0" kindref="member">themecolour</ref></defval>
        </param>
        <briefdescription>
<para>this will produce a popup message box. </para>
        </briefdescription>
        <detaileddescription>
<para>this function will block the calling state, and automatically handles dpad input. you can specify the text to draw in the message box, and what buttons should be provided. when a button is pressed, the index of whatever button was pressed will be returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>the message to draw in the box </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>btns</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of vector of strings that will be drawn as buttons below the message </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>clear_screen</parametername>
</parameternamelist>
<parameterdescription>
<para>if this is true, the screen will be cleared when the dialogue closes (any part of the calling state that is wrapped with the <computeroutput>draw</computeroutput> macro will be redrawn after the dialgoue closes irrespective of this parameter). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>the colour to draw the dialogue. by default, this will be the current theme colour </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint8_t the index of whatever button is selected </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1479" column="13" bodyfile="main/watch2.cpp" bodystart="1479" bodyend="1599" declfile="main/watch2.h" declline="588" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1aec6ededae906f13c332930a3b30040d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int watch2::initSD</definition>
        <argsstring>(bool handleCS=true)</argsstring>
        <name>initSD</name>
        <param>
          <type>bool</type>
          <declname>handleCS</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>initalises the SD card. </para>
        </briefdescription>
        <detaileddescription>
<para>this will try and initalise the SD card and set up the watch&apos;s variables that track the SD card&apos;s state. most watch 2 functions that work with the SD card call this function before doing things</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>handleCS</parametername>
</parameternamelist>
<parameterdescription>
<para>whether or not the SPI chip select pins should be manually configured by the function </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int the state of the sd card 0 - the SD card couldn&apos;t be mounted 1 - the SD card was mounted successfully </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1601" column="9" bodyfile="main/watch2.cpp" bodystart="1601" bodyend="1648" declfile="main/watch2.h" declline="601" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1addb19db8b616c988a84dea81a594f1fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::colour888</definition>
        <argsstring>(uint16_t colour, float *r, float *g, float *b)</argsstring>
        <name>colour888</name>
        <param>
          <type>uint16_t</type>
          <declname>colour</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>converts a 16 bit 565 colour to a 24 bit 888 colour. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>colour</parametername>
</parameternamelist>
<parameterdescription>
<para>a 16 bit 565 colour </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the red component of the 24 bit colour </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the green component of the 24 bit colour </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the blue component of the 24 bit colour </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1651" column="10" bodyfile="main/watch2.cpp" bodystart="1651" bodyend="1660" declfile="main/watch2.h" declline="610" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ac4f3f79dee7cc0163d690a44213948c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::HSVtoRGB</definition>
        <argsstring>(float *r, float *g, float *b, float h, float s, float v)</argsstring>
        <name>HSVtoRGB</name>
        <param>
          <type>float *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>g</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>b</declname>
        </param>
        <param>
          <type>float</type>
          <declname>h</declname>
        </param>
        <param>
          <type>float</type>
          <declname>s</declname>
        </param>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>converts an HSV colour to an RGB colour. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para>the red component of the colour </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>g</parametername>
</parameternamelist>
<parameterdescription>
<para>the green component of the colour </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>b</parametername>
</parameternamelist>
<parameterdescription>
<para>the blue component of the colour </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>the hue component of the colour </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>the saturation component of the colour </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the value component of the colour </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1663" column="10" bodyfile="main/watch2.cpp" bodystart="1663" bodyend="1710" declfile="main/watch2.h" declline="621" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ada729a2b1f6039b4f314a42226df07a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::getHeatMapColor</definition>
        <argsstring>(float value, float *red, float *green, float *blue)</argsstring>
        <name>getHeatMapColor</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>red</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>green</declname>
        </param>
        <param>
          <type>float *</type>
          <declname>blue</declname>
        </param>
        <briefdescription>
<para>gets the colour at a certain position of a gradient. </para>
        </briefdescription>
        <detaileddescription>
<para>the gradient is currently fixed as the trans flag, but i might change this function so that any gradient can be used. this is currently used by the watch face, when the time animation is set to trans mode. this was adapted from <ulink url="http://www.andrewnoske.com/wiki/Code_-_heatmaps_and_color_gradient">http://www.andrewnoske.com/wiki/Code_-_heatmaps_and_color_gradient</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the gradient to get the colour at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>red</parametername>
</parameternamelist>
<parameterdescription>
<para>the red component of the colour </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>green</parametername>
</parameternamelist>
<parameterdescription>
<para>the green component of the colour </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blue</parametername>
</parameternamelist>
<parameterdescription>
<para>the blue component of the colour </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1713" column="10" bodyfile="main/watch2.cpp" bodystart="1713" bodyend="1740" declfile="main/watch2.h" declline="634" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ac0c3990239dd1d485a9096afa590d22a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double watch2::ReadVoltage</definition>
        <argsstring>(byte pin)</argsstring>
        <name>ReadVoltage</name>
        <param>
          <type>byte</type>
          <declname>pin</declname>
        </param>
        <briefdescription>
<para>performs an ADC reading, then processes it to me more accurate. this was stolen from <ulink url="https://github.com/G6EJD/ESP32-ADC-Accuracy-Improvement-function">https://github.com/G6EJD/ESP32-ADC-Accuracy-Improvement-function</ulink>. the ESP32&apos;s ADC is non-linear, so this function takes an ADC reading, then adjusts it using a polynomial to make it more linear </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pin</parametername>
</parameternamelist>
<parameterdescription>
<para>the pin to read the voltage at </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>double the adjusted voltage read </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1743" column="12" bodyfile="main/watch2.cpp" bodystart="1743" bodyend="1748" declfile="main/watch2.h" declline="643" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ace377d6649d42c5b76b9561c90559b4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::setFont</definition>
        <argsstring>(const char *font, TFT_eSPI &amp;tft=oled, fs::FS &amp;ffs=SPIFFS)</argsstring>
        <name>setFont</name>
        <param>
          <type>const char *</type>
          <declname>font</declname>
        </param>
        <param>
          <type>TFT_eSPI &amp;</type>
          <declname>tft</declname>
          <defval><ref refid="namespacewatch2_1ae6409853423f64360383769753ee7b8e" kindref="member">oled</ref></defval>
        </param>
        <param>
          <type>fs::FS &amp;</type>
          <declname>ffs</declname>
          <defval>SPIFFS</defval>
        </param>
        <briefdescription>
<para>sets the font used for a TFT or Sprite object from a vlw file stored on a filesystem. </para>
        </briefdescription>
        <detaileddescription>
<para>the TFT_eSPI library allows you to use .vlw fonts. It comes with a Processing sketch that lets you generate vlw fonts from standard font files. You can store a font file on a file system (like an SD card or SPIFFS), and use it to draw text to the TFT (or a Sprite). This method checks if the specified font exists on the specified filesystem, and if it does, it sets it as the font for the specified TFT or Sprite.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>font</parametername>
</parameternamelist>
<parameterdescription>
<para>a path to the vlw file on the specified file system. don&apos;t include the &quot;.vlw&quot; extension. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>tft</parametername>
</parameternamelist>
<parameterdescription>
<para>the TFT_eSPI object to set the font for. this is the main TFT object by default. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ffs</parametername>
</parameternamelist>
<parameterdescription>
<para>the filesystem to load the font from. this is SPIFFS by default. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1750" column="10" bodyfile="main/watch2.cpp" bodystart="1750" bodyend="1761" declfile="main/watch2.h" declline="656" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ada58194a8a047c601cd29bdf13e7e325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::getTextBounds</definition>
        <argsstring>(const char *string, int16_t x, int16_t y, int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h)</argsstring>
        <name>getTextBounds</name>
        <param>
          <type>const char *</type>
          <declname>string</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>gets the dimensions of some text. </para>
        </briefdescription>
        <detaileddescription>
<para>this aims to be compatible with the <computeroutput><ref refid="namespacewatch2_1ada58194a8a047c601cd29bdf13e7e325" kindref="member">getTextBounds()</ref></computeroutput> method from AdafruitGFX. This function does consider the number of lines that a string will take when printed, and determines the height of one line based on the current font.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>string</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to find the dimensions of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position at which the string will be drawn </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position at which the string will be drawn </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>the x component of the upper left corner of the string&apos;s bounding box </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>the y component of the upper left corner of the string&apos;s bounding box </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the string&apos;s bounding box </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the string&apos;s bounding box </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1763" column="10" bodyfile="main/watch2.cpp" bodystart="1763" bodyend="1772" declfile="main/watch2.h" declline="683" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a9da273ddeb6f4f98293e7063039752d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::getTextBounds</definition>
        <argsstring>(const String &amp;str, int16_t x, int16_t y, int16_t *x1, int16_t *y1, uint16_t *w, uint16_t *h)</argsstring>
        <name>getTextBounds</name>
        <param>
          <type>const String &amp;</type>
          <declname>str</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>x1</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>y1</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>w</declname>
        </param>
        <param>
          <type>uint16_t *</type>
          <declname>h</declname>
        </param>
        <briefdescription>
<para>gets the dimensions of some text. </para>
        </briefdescription>
        <detaileddescription>
<para>this aims to be compatible with the <computeroutput><ref refid="namespacewatch2_1ada58194a8a047c601cd29bdf13e7e325" kindref="member">getTextBounds()</ref></computeroutput> method from AdafruitGFX. This function does consider the number of lines that a string will take when printed, and determines the height of one line based on the current font.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>str</parametername>
</parameternamelist>
<parameterdescription>
<para>the string to find the dimensions of </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position at which the string will be drawn </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position at which the string will be drawn </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x1</parametername>
</parameternamelist>
<parameterdescription>
<para>the x component of the upper left corner of the string&apos;s bounding box </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y1</parametername>
</parameternamelist>
<parameterdescription>
<para>the y component of the upper left corner of the string&apos;s bounding box </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>w</parametername>
</parameternamelist>
<parameterdescription>
<para>the width of the string&apos;s bounding box </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>h</parametername>
</parameternamelist>
<parameterdescription>
<para>the height of the string&apos;s bounding box </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1774" column="10" bodyfile="main/watch2.cpp" bodystart="1774" bodyend="1783" declfile="main/watch2.h" declline="699" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1acaebebb7e9bbe265740d2f9a84159787" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * watch2::humanSize</definition>
        <argsstring>(uint64_t bytes)</argsstring>
        <name>humanSize</name>
        <param>
          <type>uint64_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>returns a file size in human readable form. </para>
        </briefdescription>
        <detaileddescription>
<para>this will return a string that expresses a given file size in a format that makes more sense to humans. For example, if you pass <computeroutput>1030</computeroutput> bytes, this function will return &quot;1KB&quot;.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const char* a human readable form </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1786" column="16" bodyfile="main/watch2.cpp" bodystart="1786" bodyend="1802" declfile="main/watch2.h" declline="710" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a489c0c4d7b16a33e8b5708c539042fe4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint16_t</type>
        <definition>uint16_t watch2::read16</definition>
        <argsstring>(fs::File &amp;f)</argsstring>
        <name>read16</name>
        <param>
          <type>fs::File &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>idk what this does. it&apos;s part of <ref refid="namespacewatch2_1a03e9dab5718c7bae6b30ae557c9e2358" kindref="member">drawBmp()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>this is from a BMP rendering function written by Bodmer, that can be found at <ulink url="https://github.com/Bodmer/TFT_eSPI/blob/master/examples/Generic/TFT_SPIFFS_BMP/BMP_functions.ino">https://github.com/Bodmer/TFT_eSPI/blob/master/examples/Generic/TFT_SPIFFS_BMP/BMP_functions.ino</ulink> i&apos;m not entirely sure what this function actually does...</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>??? </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t ??? </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1807" column="14" bodyfile="main/watch2.cpp" bodystart="1807" bodyend="1812" declfile="main/watch2.h" declline="721" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a34f7cef11ad47a815feaa936fba3d162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t watch2::read32</definition>
        <argsstring>(fs::File &amp;f)</argsstring>
        <name>read32</name>
        <param>
          <type>fs::File &amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>idk what this does. it&apos;s part of <ref refid="namespacewatch2_1a03e9dab5718c7bae6b30ae557c9e2358" kindref="member">drawBmp()</ref>. </para>
        </briefdescription>
        <detaileddescription>
<para>this is from a BMP rendering function written by Bodmer, that can be found at <ulink url="https://github.com/Bodmer/TFT_eSPI/blob/master/examples/Generic/TFT_SPIFFS_BMP/BMP_functions.ino">https://github.com/Bodmer/TFT_eSPI/blob/master/examples/Generic/TFT_SPIFFS_BMP/BMP_functions.ino</ulink> i&apos;m not entirely sure what this function actually does...</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>??? </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>uint16_t ??? </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1814" column="14" bodyfile="main/watch2.cpp" bodystart="1814" bodyend="1821" declfile="main/watch2.h" declline="732" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a03e9dab5718c7bae6b30ae557c9e2358" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::drawBmp</definition>
        <argsstring>(const char *filename, int16_t x, int16_t y)</argsstring>
        <name>drawBmp</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>draws a BMP to the screen. </para>
        </briefdescription>
        <detaileddescription>
<para>this is a function written by Bodmer, and can be found at <ulink url="https://github.com/Bodmer/TFT_eSPI/blob/master/examples/Generic/TFT_SPIFFS_BMP/BMP_functions.ino">https://github.com/Bodmer/TFT_eSPI/blob/master/examples/Generic/TFT_SPIFFS_BMP/BMP_functions.ino</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the BMP to draw </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position to draw the image at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position to draw the image at </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1823" column="10" bodyfile="main/watch2.cpp" bodystart="1823" bodyend="1889" declfile="main/watch2.h" declline="743" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ae470db9c3abba738785016d024eef32f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structwatch2_1_1imageData" kindref="compound">imageData</ref></type>
        <definition>imageData watch2::getImageData</definition>
        <argsstring>(const char *filename)</argsstring>
        <name>getImageData</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
<para>get the data of an image as an array of pixels. </para>
        </briefdescription>
        <detaileddescription>
<para>this function relies on <ulink url="https://github.com/nothings/stb/blob/master/stb_image.h">stb_image.h</ulink> to return an array of pixel data based on an input file. the image formats supported are dependant on what stb_image.h can handle, which are listed below:<itemizedlist>
<listitem><para>JPEG baseline &amp; progressive (12 bpc/arithmetic not supported, same as stock IJG lib)</para>
</listitem><listitem><para>PNG 1/2/4/8/16-bit-per-channel</para>
</listitem><listitem><para>TGA (not sure what subset, if a subset)</para>
</listitem><listitem><para>BMP non-1bpp, non-RLE</para>
</listitem><listitem><para>PSD (composited view only, no extra channels, 8/16 bit-per-channel <linebreak/>
</para>
</listitem><listitem><para>GIF (*comp always reports as 4-channel, not animated)</para>
</listitem><listitem><para>HDR (radiance rgbE format)</para>
</listitem><listitem><para>PIC (Softimage PIC)</para>
</listitem><listitem><para>PNM (PPM and PGM binary only) This function returns an <computeroutput><ref refid="structwatch2_1_1imageData" kindref="compound">imageData</ref></computeroutput> struct, which contains the raw pixel data, and some metadata, like width and height. Images can be drawn to the screen using <computeroutput><ref refid="namespacewatch2_1ae3d48e9966feb5abcc947912980b194e" kindref="member">drawImage()</ref></computeroutput>. Once you have drawn the image, you can free the memory used by calling <computeroutput><ref refid="namespacewatch2_1a8aa5d601325d791b39966859c1eea4f1" kindref="member">freeImageData()</ref></computeroutput> on the <computeroutput>data</computeroutput> member of the returned struct.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the path to the image file </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="structwatch2_1_1imageData" kindref="compound">imageData</ref> a struct containing image data </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1892" column="15" bodyfile="main/watch2.cpp" bodystart="1892" bodyend="1927" declfile="main/watch2.h" declline="766" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a8aa5d601325d791b39966859c1eea4f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::freeImageData</definition>
        <argsstring>(unsigned char *data)</argsstring>
        <name>freeImageData</name>
        <param>
          <type>unsigned char *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>frees the memory used by an image loaded using <computeroutput><ref refid="namespacewatch2_1ae470db9c3abba738785016d024eef32f" kindref="member">getImageData()</ref></computeroutput>. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>the image data to free. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1929" column="10" bodyfile="main/watch2.cpp" bodystart="1929" bodyend="1932" declfile="main/watch2.h" declline="772" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ae3d48e9966feb5abcc947912980b194e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char * watch2::drawImage</definition>
        <argsstring>(imageData data, int16_t img_x, int16_t img_y, float scaling=1.0)</argsstring>
        <name>drawImage</name>
        <param>
          <type><ref refid="structwatch2_1_1imageData" kindref="compound">imageData</ref></type>
          <declname>data</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>img_x</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>img_y</declname>
        </param>
        <param>
          <type>float</type>
          <declname>scaling</declname>
          <defval>1.0</defval>
        </param>
        <briefdescription>
<para>draws an image to the screen. </para>
        </briefdescription>
        <detaileddescription>
<para>this function can be used to draw images returned from <computeroutput><ref refid="namespacewatch2_1ae470db9c3abba738785016d024eef32f" kindref="member">getImageData()</ref></computeroutput>. you can pass a value that can be used to scale the image so that it will be a different size. the value passed is used to determine how many times smaller the image will be drawn. if the value passed is 2.0, the image will be half the size. if the value is 0.5, the image will be drawn at twice the size. the image resizing is done by <ulink url="https://github.com/nothings/stb/blob/master/stb_image_resize.h">stb_image_resize.h</ulink>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>an <computeroutput><ref refid="structwatch2_1_1imageData" kindref="compound">imageData</ref></computeroutput> containing the image data </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>img_x</parametername>
</parameternamelist>
<parameterdescription>
<para>the x position to draw the image at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>img_y</parametername>
</parameternamelist>
<parameterdescription>
<para>the y position to draw the image at </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scaling</parametername>
</parameternamelist>
<parameterdescription>
<para>the scaling factor </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>const char* if the image couldn&apos;t be read, this will return a string describing the reason why </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="1934" column="16" bodyfile="main/watch2.cpp" bodystart="1934" bodyend="1997" declfile="main/watch2.h" declline="788" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1aed15f8bdc27e942cf0763aaa8144aaf5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::enable_wifi</definition>
        <argsstring>(bool connect=true)</argsstring>
        <name>enable_wifi</name>
        <param>
          <type>bool</type>
          <declname>connect</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>enables the wifi subsystem. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>connect</parametername>
</parameternamelist>
<parameterdescription>
<para>if this is true, the system will connect to one of the most recently connected to access points </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="2000" column="10" bodyfile="main/watch2.cpp" bodystart="2000" bodyend="2017" declfile="main/watch2.h" declline="794" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a25367843827215038654ac050b5812f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::disable_wifi</definition>
        <argsstring>()</argsstring>
        <name>disable_wifi</name>
        <briefdescription>
<para>disables the wifi subsystem. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="2019" column="10" bodyfile="main/watch2.cpp" bodystart="2019" bodyend="2030" declfile="main/watch2.h" declline="799" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1adbc7bc351a4609d2c6d9f268fa85834f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::connectToWifiAP</definition>
        <argsstring>(const char *ssid=&quot;&quot;, const char *password=&quot;&quot;)</argsstring>
        <name>connectToWifiAP</name>
        <param>
          <type>const char *</type>
          <declname>ssid</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const char *</type>
          <declname>password</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <briefdescription>
<para>connect to an access point. </para>
        </briefdescription>
        <detaileddescription>
<para>if <computeroutput>ssid</computeroutput> is specified, the system will attempt to connect to that specific access point. if <computeroutput>ssid</computeroutput> isn&apos;t specified, the system will attempt to connect to one of the access points that was most recently connected to. this works by attempting to connect to each of the <computeroutput>n</computeroutput> access points that were most recently connected to. the value of <computeroutput>n</computeroutput> is determined by <computeroutput>initial_wifi_reconnect_attempts</computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ssid</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>password</parametername>
</parameternamelist>
<parameterdescription>
<para></para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="2032" column="10" bodyfile="main/watch2.cpp" bodystart="2032" bodyend="2147" declfile="main/watch2.h" declline="811" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1af5a3c9f52f30219f555568b732ce5902" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::getTimeFromNTP</definition>
        <argsstring>()</argsstring>
        <name>getTimeFromNTP</name>
        <briefdescription>
<para>attempts to get the current time and date using NTP. </para>
        </briefdescription>
        <detaileddescription>
<para>for this to work, the system must be connected to the internet. depending on the system settings, this can be called automatically when the system boots or wakes up from sleep mode. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="2149" column="10" bodyfile="main/watch2.cpp" bodystart="2149" bodyend="2158" declfile="main/watch2.h" declline="819" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a9be0a28802d0233a14adfff50b070b74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>cJSON *</type>
        <definition>cJSON * watch2::getWifiProfiles</definition>
        <argsstring>()</argsstring>
        <name>getWifiProfiles</name>
        <briefdescription>
<para>returns the wifi profiles JSON object. </para>
        </briefdescription>
        <detaileddescription>
<para>when the system connects to an access point, the connection details are saved in SPIFFS as a &quot;profile&quot;, so that the watch can automatically reconnect to it later. this function reads the profiles file from SPIFFS, parses it to create a cJSON struct, and returns it. The profile list can be updated using <computeroutput><ref refid="namespacewatch2_1ad0db86ca6806523de4f44315a2c0f369" kindref="member">setWifiProfiles()</ref></computeroutput>. If a profiles file doesn&apos;t exist, a blank one is created.</para>
<para>The profiles object has two keys:<itemizedlist>
<listitem><para><computeroutput>profiles</computeroutput><itemizedlist>
<listitem><para>this is an array of objects that each represent one profile. each object has 3 keys:<itemizedlist>
<listitem><para><computeroutput>ssid</computeroutput>: the access point&apos;s SSID</para>
</listitem><listitem><para><computeroutput>password</computeroutput>: the access point&apos;s password, in plain text...</para>
</listitem><listitem><para><computeroutput>encryption</computeroutput>: an enumeration that represents the encryption used by the access point. the possible values can be found <ulink url="https://docs.espressif.com/projects/esp-idf/en/v3.3.1/api-reference/network/esp_wifi.html#_CPPv416wifi_auth_mode_t">here</ulink></para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
</listitem><listitem><para><computeroutput>access_list</computeroutput><itemizedlist>
<listitem><para>this is an array of strings that represent the SSIDs of profiles in the order of most recently connected.</para>
</listitem></itemizedlist>
</para>
</listitem></itemizedlist>
</para>
<para><simplesect kind="return"><para>cJSON* the wifi profiles </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="2160" column="11" bodyfile="main/watch2.cpp" bodystart="2160" bodyend="2233" declfile="main/watch2.h" declline="839" declcolumn="11"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ad0db86ca6806523de4f44315a2c0f369" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::setWifiProfiles</definition>
        <argsstring>(cJSON *profiles)</argsstring>
        <name>setWifiProfiles</name>
        <param>
          <type>cJSON *</type>
          <declname>profiles</declname>
        </param>
        <briefdescription>
<para>saves the wifi profiles list. </para>
        </briefdescription>
        <detaileddescription>
<para>when the system connects to an access point, the connection details are saved in SPIFFS as a &quot;profile&quot;, so that the watch can automatically reconnect to it later. this function can be used to update the profile list, by passing a profile cJSON struct. the object that is passed should follow the schema defined in the documentation of <computeroutput><ref refid="namespacewatch2_1a9be0a28802d0233a14adfff50b070b74" kindref="member">getWifiProfiles()</ref></computeroutput>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>profiles</parametername>
</parameternamelist>
<parameterdescription>
<para>a cJSON object containing wifi profiles </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="2235" column="10" bodyfile="main/watch2.cpp" bodystart="2235" bodyend="2253" declfile="main/watch2.h" declline="850" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1adef01cca38314d783bb5984e45615227" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::enable_bluetooth</definition>
        <argsstring>()</argsstring>
        <name>enable_bluetooth</name>
        <briefdescription>
<para>enables the bluetooth subsystem. this is kind of broken at the minute. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="2255" column="10" bodyfile="main/watch2.cpp" bodystart="2255" bodyend="2303" declfile="main/watch2.h" declline="855" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a7f51f65ebfcc440f28bbf73f7f7cdd69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::disable_bluetooth</definition>
        <argsstring>()</argsstring>
        <name>disable_bluetooth</name>
        <briefdescription>
<para>disables the bluetooth subsystem. this is kind of broken at the minute. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="2305" column="10" bodyfile="main/watch2.cpp" bodystart="2305" bodyend="2321" declfile="main/watch2.h" declline="860" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a7e22a93be8e05b4758375942744be6fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int watch2::img_read</definition>
        <argsstring>(void *user, char *data, int size)</argsstring>
        <name>img_read</name>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <param>
          <type>char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="2329" column="9" bodyfile="main/watch2.cpp" bodystart="2329" bodyend="2334" declfile="main/watch2.h" declline="863" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ae5eb542db272adbbcf39c78b79433821" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void watch2::img_skip</definition>
        <argsstring>(void *user, int n)</argsstring>
        <name>img_skip</name>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <param>
          <type>int</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="2336" column="10" bodyfile="main/watch2.cpp" bodystart="2336" bodyend="2340" declfile="main/watch2.h" declline="864" declcolumn="10"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1a1300c9979708db7b12c6548d077d486d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int watch2::img_eof</definition>
        <argsstring>(void *user)</argsstring>
        <name>img_eof</name>
        <param>
          <type>void *</type>
          <declname>user</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.cpp" line="2342" column="9" bodyfile="main/watch2.cpp" bodystart="2342" bodyend="2348" declfile="main/watch2.h" declline="865" declcolumn="9"/>
      </memberdef>
      <memberdef kind="function" id="namespacewatch2_1ac3a8342f484fe1aa794c013aab54b811" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int watch2::something</definition>
        <argsstring>(int x, int y)</argsstring>
        <name>something</name>
        <param>
          <type>int</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>i dont know!!1!!! </para>
        </briefdescription>
        <detaileddescription>
<para>this was a sample prototype is added when i was creating this file that I never got rid of. it has no implementation, so don&apos;t use it.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>x</parametername>
</parameternamelist>
<parameterdescription>
<para>how many different stars there are in the sky </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>y</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of times you have blinked in your lifetime </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>int the number of bugs in this codebase </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="main/watch2.h" line="667" column="13" declfile="main/watch2.h" declline="667" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>functions and variables that relate to the running of the watch ii system. </para>
    </detaileddescription>
    <location file="main/watch2.cpp" line="15" column="1"/>
  </compounddef>
</doxygen>
